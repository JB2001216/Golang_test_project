package wrap

import (
	"strings"
	"testing"
)

type T struct {
	in, out string
	cols    uint
}

var tests = []T{
	{"", "", 1},
	{"", "", 2},
	{"", "", 3},

	{"1  4", "1 4", 10},

	{"1   5", "1 5", 10},

	{"1    6", "1 6", 10},
	{"1 \n 6", "1 6", 10},
	{"1 \r 6", "1 6", 10},
	{"1\r\n6", "1 6", 10},
	{"1\n\r6", "1 6", 10},

	{"123456789", "123456789", 0},

	{"123456", "1\n2\n3\n4\n5\n6", 1},
	{"123456", "12\n34\n56", 2},
	{"123456", "123\n456", 3},
	{"123456", "1234\n56", 4},
	{"123456", "12345\n6", 5},
	{"123456", "123456", 6},
	{"123456", "123456", 7},

	{"1 3", "1\n3", 1},
	{"1 3", "1\n3", 2},
	{"1 3", "1 3", 3},
	{"1 3", "1 3", 4},

	{"12 45", "1\n2\n4\n5", 1},
	{"12 45", "12\n45", 2},
	{"12 45", "12\n45", 3},
	{"12 45", "12\n45", 4},
	{"12 45", "12 45", 5},
	{"12 45", "12 45", 6},

	{"123 567", "1\n2\n3\n5\n6\n7", 1},
	{"123 567", "12\n3\n56\n7", 2},
	{"123 567", "123\n567", 3},
	{"123 567", "123\n567", 4},
	{"123 567", "123\n567", 5},
	{"123 567", "123\n567", 6},
	{"123 567", "123 567", 7},
	{"123 567", "123 567", 8},

	{"123 567 9ab", "1\n2\n3\n5\n6\n7\n9\na\nb", 1},
	{"123 567 9ab", "12\n3\n56\n7\n9a\nb", 2},
	{"123 567 9ab", "123\n567\n9ab", 3},
	{"123 567 9ab", "123\n567\n9ab", 4},
	{"123 567 9ab", "123\n567\n9ab", 5},
	{"123 567 9ab", "123\n567\n9ab", 6},
	{"123 567 9ab", "123 567\n9ab", 7},
	{"123 567 9ab", "123 567\n9ab", 8},
	{"123 567 9ab", "123 567\n9ab", 9},
	{"123 567 9ab", "123 567\n9ab", 10},
	{"123 567 9ab", "123 567 9ab", 11},
	{"123 567 9ab", "123 567 9ab", 12},

	{"123 567 9ab def", "1\n2\n3\n5\n6\n7\n9\na\nb\nd\ne\nf", 1},
	{"123 567 9ab def", "12\n3\n56\n7\n9a\nb\nde\nf", 2},
	{"123 567 9ab def", "123\n567\n9ab\ndef", 3},
	{"123 567 9ab def", "123\n567\n9ab\ndef", 4},
	{"123 567 9ab def", "123\n567\n9ab\ndef", 5},
	{"123 567 9ab def", "123\n567\n9ab\ndef", 6},
	{"123 567 9ab def", "123 567\n9ab def", 7},
	{"123 567 9ab def", "123 567\n9ab def", 8},
	{"123 567 9ab def", "123 567\n9ab def", 9},
	{"123 567 9ab def", "123 567\n9ab def", 10},
	{"123 567 9ab def", "123 567 9ab\ndef", 11},
	{"123 567 9ab def", "123 567 9ab\ndef", 12},
	{"123 567 9ab def", "123 567 9ab\ndef", 13},
	{"123 567 9ab def", "123 567 9ab\ndef", 14},
	{"123 567 9ab def", "123 567 9ab def", 15},
	{"123 567 9ab def", "123 567 9ab def", 16},

	{"1\n2\n3", "1 2 3", 10},
	{"1\r\n2\r\n3", "1 2 3", 10},
	{"1\n\r2\n\r3", "1 2 3", 10},

	{"1\n2\n3\n4", "1 2\n3 4", 3},
	{"1\r\n2\r\n3\r\n4", "1 2\n3 4", 3},
	{"1 \r\n 2 \r\n 3 \r\n 4", "1 2\n3 4", 3},
	{"1 \r\n2 \r\n3 \r\n4", "1 2\n3 4", 3},
	{"1\n\r2\n\r3\n\r4", "1 2\n3 4", 3},
	{"1 \n\r 2 \n\r 3 \n\r 4", "1 2\n3 4", 3},
	{"1\n\r 2\n\r 3\n\r 4", "1 2\n3 4", 3},
	{"1 \n\r2 \n\r3 \n\r4", "1 2\n3 4", 3},

	{"1\n2\n3\n4", "1 2 3 4", 10},
	{"1\r\n2\r\n3\r\n4", "1 2 3 4", 10},
}

// Make output easier to read by using \n instead of an actual newline
func newlReplacer(s string) string {
	s = strings.Replace(s, "\n", `\n`, -1)
	s = strings.Replace(s, "\r", `\r`, -1)
	return s
}

func TestString(t *testing.T) {
	for _, v := range tests {
		if x := String(v.in, v.cols); x != v.out {
			t.Errorf(`String("%v", %v); got "%v", want "%v"`, newlReplacer(v.in), v.cols, newlReplacer(x), newlReplacer(v.out))
			return
		}
	}
}
